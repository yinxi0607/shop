// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductRpc_ListProducts_FullMethodName            = "/product.ProductRpc/ListProducts"
	ProductRpc_GetProductDetail_FullMethodName        = "/product.ProductRpc/GetProductDetail"
	ProductRpc_UpdateProduct_FullMethodName           = "/product.ProductRpc/UpdateProduct"
	ProductRpc_AddProduct_FullMethodName              = "/product.ProductRpc/AddProduct"
	ProductRpc_ListBannerProducts_FullMethodName      = "/product.ProductRpc/ListBannerProducts"
	ProductRpc_ListRecommendedProducts_FullMethodName = "/product.ProductRpc/ListRecommendedProducts"
)

// ProductRpcClient is the client API。.md for ProductRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductRpcClient interface {
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	GetProductDetail(ctx context.Context, in *GetProductDetailRequest, opts ...grpc.CallOption) (*GetProductDetailResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
	ListBannerProducts(ctx context.Context, in *ListBannerProductsRequest, opts ...grpc.CallOption) (*ListBannerProductsResponse, error)
	ListRecommendedProducts(ctx context.Context, in *ListRecommendedProductsRequest, opts ...grpc.CallOption) (*ListRecommendedProductsResponse, error)
}

type productRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewProductRpcClient(cc grpc.ClientConnInterface) ProductRpcClient {
	return &productRpcClient{cc}
}

func (c *productRpcClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, ProductRpc_ListProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) GetProductDetail(ctx context.Context, in *GetProductDetailRequest, opts ...grpc.CallOption) (*GetProductDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductDetailResponse)
	err := c.cc.Invoke(ctx, ProductRpc_GetProductDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, ProductRpc_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, ProductRpc_AddProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) ListBannerProducts(ctx context.Context, in *ListBannerProductsRequest, opts ...grpc.CallOption) (*ListBannerProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBannerProductsResponse)
	err := c.cc.Invoke(ctx, ProductRpc_ListBannerProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRpcClient) ListRecommendedProducts(ctx context.Context, in *ListRecommendedProductsRequest, opts ...grpc.CallOption) (*ListRecommendedProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecommendedProductsResponse)
	err := c.cc.Invoke(ctx, ProductRpc_ListRecommendedProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductRpcServer is the server API。.md for ProductRpc service.
// All implementations must embed UnimplementedProductRpcServer
// for forward compatibility.
type ProductRpcServer interface {
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	GetProductDetail(context.Context, *GetProductDetailRequest) (*GetProductDetailResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	ListBannerProducts(context.Context, *ListBannerProductsRequest) (*ListBannerProductsResponse, error)
	ListRecommendedProducts(context.Context, *ListRecommendedProductsRequest) (*ListRecommendedProductsResponse, error)
	mustEmbedUnimplementedProductRpcServer()
}

// UnimplementedProductRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductRpcServer struct{}

func (UnimplementedProductRpcServer) ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedProductRpcServer) GetProductDetail(context.Context, *GetProductDetailRequest) (*GetProductDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetail not implemented")
}
func (UnimplementedProductRpcServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductRpcServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedProductRpcServer) ListBannerProducts(context.Context, *ListBannerProductsRequest) (*ListBannerProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBannerProducts not implemented")
}
func (UnimplementedProductRpcServer) ListRecommendedProducts(context.Context, *ListRecommendedProductsRequest) (*ListRecommendedProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecommendedProducts not implemented")
}
func (UnimplementedProductRpcServer) mustEmbedUnimplementedProductRpcServer() {}
func (UnimplementedProductRpcServer) testEmbeddedByValue()                    {}

// UnsafeProductRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductRpcServer will
// result in compilation errors.
type UnsafeProductRpcServer interface {
	mustEmbedUnimplementedProductRpcServer()
}

func RegisterProductRpcServer(s grpc.ServiceRegistrar, srv ProductRpcServer) {
	// If the following call pancis, it indicates UnimplementedProductRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductRpc_ServiceDesc, srv)
}

func _ProductRpc_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_ListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_GetProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).GetProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_GetProductDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).GetProductDetail(ctx, req.(*GetProductDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_ListBannerProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBannerProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).ListBannerProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_ListBannerProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).ListBannerProducts(ctx, req.(*ListBannerProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRpc_ListRecommendedProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecommendedProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).ListRecommendedProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_ListRecommendedProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).ListRecommendedProducts(ctx, req.(*ListRecommendedProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductRpc_ServiceDesc is the grpc.ServiceDesc for ProductRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductRpc",
	HandlerType: (*ProductRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProducts",
			Handler:    _ProductRpc_ListProducts_Handler,
		},
		{
			MethodName: "GetProductDetail",
			Handler:    _ProductRpc_GetProductDetail_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductRpc_UpdateProduct_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _ProductRpc_AddProduct_Handler,
		},
		{
			MethodName: "ListBannerProducts",
			Handler:    _ProductRpc_ListBannerProducts_Handler,
		},
		{
			MethodName: "ListRecommendedProducts",
			Handler:    _ProductRpc_ListRecommendedProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
