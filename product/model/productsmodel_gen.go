// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productsFieldNames          = builder.RawFieldNames(&Products{})
	productsRows                = strings.Join(productsFieldNames, ",")
	productsRowsExpectAutoSet   = strings.Join(stringx.Remove(productsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productsRowsWithPlaceHolder = strings.Join(stringx.Remove(productsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	productsModel interface {
		Insert(ctx context.Context, data *Products) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Products, error)
		Update(ctx context.Context, data *Products) (sql.Result, error)
		List(ctx context.Context, page, pageSize int32, categoryId *int64, minPrice, maxPrice *float64) ([]*Products, int32, error)
		ListBanner(ctx context.Context, limit int32) ([]*Products, error)
		ListRecommended(ctx context.Context, limit int32) ([]*Products, error)
	}

	defaultProductsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Products struct {
		Id          int64          `db:"id"`
		Name        string         `db:"name"`
		Description string         `db:"description"`
		Detail      sql.NullString `db:"detail"`
		MainImage   string         `db:"main_image"`
		Thumbnail   string         `db:"thumbnail"`
		Price       float64        `db:"price"`
		Stock       int64          `db:"stock"`
		CategoryId  int64          `db:"category_id"`
		IsBanner    bool           `db:"is_banner"`
		CreatedAt   time.Time      `db:"created_at"`
		UpdatedAt   time.Time      `db:"updated_at"`
		DeletedAt   sql.NullTime   `db:"deleted_at"`
	}
)

func newProductsModel(conn sqlx.SqlConn) *defaultProductsModel {
	return &defaultProductsModel{
		conn:  conn,
		table: "`products`",
	}
}

func (m *defaultProductsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProductsModel) FindOne(ctx context.Context, id int64) (*Products, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productsRows, m.table)
	var resp Products
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductsModel) Insert(ctx context.Context, data *Products) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.Detail, data.MainImage, data.Thumbnail, data.Price, data.Stock, data.CategoryId, data.IsBanner, data.DeletedAt)
	return ret, err
}

func (m *customProductsModel) Update(ctx context.Context, data *Products) (sql.Result, error) {
	query := "UPDATE products SET name = ?, description = ?, detail = ?, main_image = ?, thumbnail = ?, price = ?, stock = ?, category_id = ? WHERE id = ? AND deleted_at IS NULL"
	return m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.Detail, data.MainImage, data.Thumbnail, data.Price, data.Stock, data.CategoryId, data.Id)
}

func (m *defaultProductsModel) tableName() string {
	return m.table
}

func (m *defaultProductsModel) List(ctx context.Context, page, pageSize int32, categoryId *int64, minPrice, maxPrice *float64) ([]*Products, int32, error) {
	var products []*Products
	var total int32
	query := "SELECT id, name, description, detail, main_image, thumbnail, price, stock, category_id, is_banner, created_at, updated_at, deleted_at FROM products WHERE deleted_at IS NULL"
	countQuery := "SELECT COUNT(*) FROM products WHERE deleted_at IS NULL"
	args := []interface{}{}

	if categoryId != nil {
		query += " AND category_id = ?"
		countQuery += " AND category_id = ?"
		args = append(args, *categoryId)
	}
	if minPrice != nil {
		query += " AND price >= ?"
		countQuery += " AND price >= ?"
		args = append(args, *minPrice)
	}
	if maxPrice != nil {
		query += " AND price <= ?"
		countQuery += " AND price <= ?"
		args = append(args, *maxPrice)
	}

	query += " LIMIT ? OFFSET ?"
	args = append(args, pageSize, (page-1)*pageSize)

	err := m.conn.QueryRowsCtx(ctx, &products, query, args...)
	if err != nil {
		return nil, 0, err
	}

	err = m.conn.QueryRowCtx(ctx, &total, countQuery, args[:len(args)-2]...)
	if err != nil {
		return nil, 0, err
	}

	return products, total, nil
}

func (m *defaultProductsModel) ListBanner(ctx context.Context, limit int32) ([]*Products, error) {
	var products []*Products
	query := "SELECT id, name, description, detail, main_image, thumbnail, price, stock, category_id, is_banner, created_at, updated_at, deleted_at FROM products WHERE is_banner = true AND deleted_at IS NULL LIMIT ?"
	err := m.conn.QueryRowsCtx(ctx, &products, query, limit)
	if err != nil {
		return nil, err
	}
	return products, nil
}

func (m *defaultProductsModel) ListRecommended(ctx context.Context, limit int32) ([]*Products, error) {
	var products []*Products
	// Simple recommendation: order by stock (or sales_count if available)
	query := "SELECT id, name, description, detail, main_image, thumbnail, price, stock, category_id, is_banner, created_at, updated_at, deleted_at FROM products WHERE deleted_at IS NULL ORDER BY stock DESC LIMIT ?"
	err := m.conn.QueryRowsCtx(ctx, &products, query, limit)
	if err != nil {
		return nil, err
	}
	return products, nil
}
