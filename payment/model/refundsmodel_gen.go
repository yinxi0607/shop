// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	refundsFieldNames          = builder.RawFieldNames(&Refunds{})
	refundsRows                = strings.Join(refundsFieldNames, ",")
	refundsRowsExpectAutoSet   = strings.Join(stringx.Remove(refundsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	refundsRowsWithPlaceHolder = strings.Join(stringx.Remove(refundsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	refundsModel interface {
		Insert(ctx context.Context, data *Refunds) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Refunds, error)
		FindOneByRefundId(ctx context.Context, refundId string) (*Refunds, error)
		Update(ctx context.Context, data *Refunds) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRefundsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Refunds struct {
		Id            int64          `db:"id"`
		RefundId      string         `db:"refund_id"`
		PaymentId     string         `db:"payment_id"`
		OrderId       string         `db:"order_id"`
		UserId        string         `db:"user_id"`
		Amount        float64        `db:"amount"`
		Status        string         `db:"status"`
		TransactionId sql.NullString `db:"transaction_id"`
		CreatedAt     time.Time      `db:"created_at"`
		UpdatedAt     time.Time      `db:"updated_at"`
	}
)

func newRefundsModel(conn sqlx.SqlConn) *defaultRefundsModel {
	return &defaultRefundsModel{
		conn:  conn,
		table: "`refunds`",
	}
}

func (m *defaultRefundsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRefundsModel) FindOne(ctx context.Context, id int64) (*Refunds, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", refundsRows, m.table)
	var resp Refunds
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRefundsModel) FindOneByRefundId(ctx context.Context, refundId string) (*Refunds, error) {
	var resp Refunds
	query := fmt.Sprintf("select %s from %s where `refund_id` = ? limit 1", refundsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, refundId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRefundsModel) Insert(ctx context.Context, data *Refunds) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, refundsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RefundId, data.PaymentId, data.OrderId, data.UserId, data.Amount, data.Status, data.TransactionId)
	return ret, err
}

func (m *defaultRefundsModel) Update(ctx context.Context, newData *Refunds) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, refundsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.RefundId, newData.PaymentId, newData.OrderId, newData.UserId, newData.Amount, newData.Status, newData.TransactionId, newData.Id)
	return err
}

func (m *defaultRefundsModel) tableName() string {
	return m.table
}
