// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: payment.proto

package paymentrpc

import (
	"context"

	"shop/payment/payment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreatePaymentRequest     = payment.CreatePaymentRequest
	CreatePaymentResponse    = payment.CreatePaymentResponse
	GetPaymentStatusRequest  = payment.GetPaymentStatusRequest
	GetPaymentStatusResponse = payment.GetPaymentStatusResponse
	GetRefundStatusRequest   = payment.GetRefundStatusRequest
	GetRefundStatusResponse  = payment.GetRefundStatusResponse
	Payment                  = payment.Payment
	PaymentCallbackRequest   = payment.PaymentCallbackRequest
	PaymentCallbackResponse  = payment.PaymentCallbackResponse
	Refund                   = payment.Refund
	RefundRequest            = payment.RefundRequest
	RefundResponse           = payment.RefundResponse

	PaymentRpc interface {
		CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
		GetPaymentStatus(ctx context.Context, in *GetPaymentStatusRequest, opts ...grpc.CallOption) (*GetPaymentStatusResponse, error)
		PaymentCallback(ctx context.Context, in *PaymentCallbackRequest, opts ...grpc.CallOption) (*PaymentCallbackResponse, error)
		Refund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*RefundResponse, error)
		GetRefundStatus(ctx context.Context, in *GetRefundStatusRequest, opts ...grpc.CallOption) (*GetRefundStatusResponse, error)
	}

	defaultPaymentRpc struct {
		cli zrpc.Client
	}
)

func NewPaymentRpc(cli zrpc.Client) PaymentRpc {
	return &defaultPaymentRpc{
		cli: cli,
	}
}

func (m *defaultPaymentRpc) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	client := payment.NewPaymentRpcClient(m.cli.Conn())
	return client.CreatePayment(ctx, in, opts...)
}

func (m *defaultPaymentRpc) GetPaymentStatus(ctx context.Context, in *GetPaymentStatusRequest, opts ...grpc.CallOption) (*GetPaymentStatusResponse, error) {
	client := payment.NewPaymentRpcClient(m.cli.Conn())
	return client.GetPaymentStatus(ctx, in, opts...)
}

func (m *defaultPaymentRpc) PaymentCallback(ctx context.Context, in *PaymentCallbackRequest, opts ...grpc.CallOption) (*PaymentCallbackResponse, error) {
	client := payment.NewPaymentRpcClient(m.cli.Conn())
	return client.PaymentCallback(ctx, in, opts...)
}

func (m *defaultPaymentRpc) Refund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*RefundResponse, error) {
	client := payment.NewPaymentRpcClient(m.cli.Conn())
	return client.Refund(ctx, in, opts...)
}

func (m *defaultPaymentRpc) GetRefundStatus(ctx context.Context, in *GetRefundStatusRequest, opts ...grpc.CallOption) (*GetRefundStatusResponse, error) {
	client := payment.NewPaymentRpcClient(m.cli.Conn())
	return client.GetRefundStatus(ctx, in, opts...)
}
