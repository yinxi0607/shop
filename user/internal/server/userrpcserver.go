// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: user.proto

package server

import (
	"context"

	"shop/user/internal/logic"
	"shop/user/internal/svc"
	"shop/user/user"
)

type UserRpcServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserRpcServer
}

func NewUserRpcServer(svcCtx *svc.ServiceContext) *UserRpcServer {
	return &UserRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *UserRpcServer) Register(ctx context.Context, in *user.RegisterRequest) (*user.RegisterResponse, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UserRpcServer) Login(ctx context.Context, in *user.LoginRequest) (*user.LoginResponse, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserRpcServer) GetUserInfo(ctx context.Context, in *user.GetUserInfoRequest) (*user.GetUserInfoResponse, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *UserRpcServer) ChangePassword(ctx context.Context, in *user.ChangePasswordRequest) (*user.ChangePasswordResponse, error) {
	l := logic.NewChangePasswordLogic(ctx, s.svcCtx)
	return l.ChangePassword(in)
}

func (s *UserRpcServer) ChangeUsername(ctx context.Context, in *user.ChangeUsernameRequest) (*user.ChangeUsernameResponse, error) {
	l := logic.NewChangeUsernameLogic(ctx, s.svcCtx)
	return l.ChangeUsername(in)
}

func (s *UserRpcServer) ChangeAvatar(ctx context.Context, in *user.ChangeAvatarRequest) (*user.ChangeAvatarResponse, error) {
	l := logic.NewChangeAvatarLogic(ctx, s.svcCtx)
	return l.ChangeAvatar(in)
}

func (s *UserRpcServer) ChangeRole(ctx context.Context, in *user.ChangeRoleRequest) (*user.ChangeRoleResponse, error) {
	l := logic.NewChangeRoleLogic(ctx, s.svcCtx)
	return l.ChangeRole(in)
}
