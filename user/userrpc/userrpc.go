// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: user.proto

package userrpc

import (
	"context"

	"shop/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChangeAvatarRequest    = user.ChangeAvatarRequest
	ChangeAvatarResponse   = user.ChangeAvatarResponse
	ChangePasswordRequest  = user.ChangePasswordRequest
	ChangePasswordResponse = user.ChangePasswordResponse
	ChangeRoleRequest      = user.ChangeRoleRequest
	ChangeRoleResponse     = user.ChangeRoleResponse
	ChangeUsernameRequest  = user.ChangeUsernameRequest
	ChangeUsernameResponse = user.ChangeUsernameResponse
	GetUserInfoRequest     = user.GetUserInfoRequest
	GetUserInfoResponse    = user.GetUserInfoResponse
	LoginRequest           = user.LoginRequest
	LoginResponse          = user.LoginResponse
	RegisterRequest        = user.RegisterRequest
	RegisterResponse       = user.RegisterResponse
	UserInfo               = user.UserInfo

	UserRpc interface {
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
		ChangeUsername(ctx context.Context, in *ChangeUsernameRequest, opts ...grpc.CallOption) (*ChangeUsernameResponse, error)
		ChangeAvatar(ctx context.Context, in *ChangeAvatarRequest, opts ...grpc.CallOption) (*ChangeAvatarResponse, error)
		ChangeRole(ctx context.Context, in *ChangeRoleRequest, opts ...grpc.CallOption) (*ChangeRoleResponse, error)
	}

	defaultUserRpc struct {
		cli zrpc.Client
	}
)

func NewUserRpc(cli zrpc.Client) UserRpc {
	return &defaultUserRpc{
		cli: cli,
	}
}

func (m *defaultUserRpc) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserRpc) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserRpc) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUserRpc) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}

func (m *defaultUserRpc) ChangeUsername(ctx context.Context, in *ChangeUsernameRequest, opts ...grpc.CallOption) (*ChangeUsernameResponse, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.ChangeUsername(ctx, in, opts...)
}

func (m *defaultUserRpc) ChangeAvatar(ctx context.Context, in *ChangeAvatarRequest, opts ...grpc.CallOption) (*ChangeAvatarResponse, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.ChangeAvatar(ctx, in, opts...)
}

func (m *defaultUserRpc) ChangeRole(ctx context.Context, in *ChangeRoleRequest, opts ...grpc.CallOption) (*ChangeRoleResponse, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.ChangeRole(ctx, in, opts...)
}
