// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cartsFieldNames          = builder.RawFieldNames(&Carts{})
	cartsRows                = strings.Join(cartsFieldNames, ",")
	cartsRowsExpectAutoSet   = strings.Join(stringx.Remove(cartsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cartsRowsWithPlaceHolder = strings.Join(stringx.Remove(cartsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	cartsModel interface {
		Insert(ctx context.Context, data *Carts) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Carts, error)
		FindOneByCartId(ctx context.Context, cartId string) (*Carts, error)
		FindOneByUserId(ctx context.Context, userId string) (*Carts, error)
		Update(ctx context.Context, data *Carts) error
		Delete(ctx context.Context, id int64) error
		SoftDeleteByUserId(ctx context.Context, userId string) (sql.Result, error)
	}

	defaultCartsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Carts struct {
		Id        int64        `db:"id"`
		CartId    string       `db:"cart_id"`
		UserId    string       `db:"user_id"`
		CreatedAt time.Time    `db:"created_at"`
		UpdatedAt time.Time    `db:"updated_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
	}
)

func newCartsModel(conn sqlx.SqlConn) *defaultCartsModel {
	return &defaultCartsModel{
		conn:  conn,
		table: "`carts`",
	}
}

func (m *defaultCartsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCartsModel) FindOne(ctx context.Context, id int64) (*Carts, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cartsRows, m.table)
	var resp Carts
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCartsModel) SoftDeleteByUserId(ctx context.Context, userId string) (sql.Result, error) {
	query := `UPDATE carts SET deleted_at = ? WHERE user_id = ? AND deleted_at IS NULL`
	return m.conn.ExecCtx(ctx, query, time.Now(), userId)
}

func (m *defaultCartsModel) FindOneByCartId(ctx context.Context, cartId string) (*Carts, error) {
	var resp Carts
	query := fmt.Sprintf("select %s from %s where `cart_id` = ? limit 1", cartsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, cartId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCartsModel) FindOneByUserId(ctx context.Context, userId string) (*Carts, error) {
	var resp Carts
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", cartsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCartsModel) Insert(ctx context.Context, data *Carts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, cartsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CartId, data.UserId, data.DeletedAt)
	return ret, err
}

func (m *defaultCartsModel) Update(ctx context.Context, newData *Carts) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cartsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.CartId, newData.UserId, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultCartsModel) tableName() string {
	return m.table
}
