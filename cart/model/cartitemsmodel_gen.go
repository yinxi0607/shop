// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cartItemsFieldNames          = builder.RawFieldNames(&CartItems{})
	cartItemsRows                = strings.Join(cartItemsFieldNames, ",")
	cartItemsRowsExpectAutoSet   = strings.Join(stringx.Remove(cartItemsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cartItemsRowsWithPlaceHolder = strings.Join(stringx.Remove(cartItemsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	cartItemsModel interface {
		Insert(ctx context.Context, data *CartItems) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CartItems, error)
		FindByCartId(ctx context.Context, cartId string) ([]*CartItems, error)
		FindOneByCartIdProductId(ctx context.Context, cartId string, productId string) (*CartItems, error)
		Update(ctx context.Context, data *CartItems) error
		Delete(ctx context.Context, id int64) error
		SoftDeleteByCartId(ctx context.Context, cartId string) (sql.Result, error)
		SoftDeleteByCartIdAndProductId(ctx context.Context, cartId string, productId string) (sql.Result, error)
	}

	defaultCartItemsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CartItems struct {
		Id        int64        `db:"id"`
		CartId    string       `db:"cart_id"`
		Pid       string       `db:"product_id"`
		Quantity  int64        `db:"quantity"`
		CreatedAt time.Time    `db:"created_at"`
		UpdatedAt time.Time    `db:"updated_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
	}
)

func newCartItemsModel(conn sqlx.SqlConn) *defaultCartItemsModel {
	return &defaultCartItemsModel{
		conn:  conn,
		table: "`cart_items`",
	}
}

func (m *defaultCartItemsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCartItemsModel) FindOne(ctx context.Context, id int64) (*CartItems, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cartItemsRows, m.table)
	var resp CartItems
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCartItemsModel) FindOneByCartIdProductId(ctx context.Context, cartId string, productId string) (*CartItems, error) {
	var resp CartItems
	query := fmt.Sprintf("select %s from %s where `cart_id` = ? and `product_id` = ? limit 1", cartItemsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, cartId, productId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCartItemsModel) Insert(ctx context.Context, data *CartItems) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, cartItemsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CartId, data.Pid, data.Quantity, data.DeletedAt)
	return ret, err
}

func (m *defaultCartItemsModel) Update(ctx context.Context, newData *CartItems) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cartItemsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.CartId, newData.Pid, newData.Quantity, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultCartItemsModel) SoftDeleteByCartId(ctx context.Context, cartId string) (sql.Result, error) {
	query := `UPDATE cart_items SET deleted_at = ? WHERE cart_id = ? AND deleted_at IS NULL`
	return m.conn.ExecCtx(ctx, query, time.Now(), cartId)
}

func (m *defaultCartItemsModel) SoftDeleteByCartIdAndProductId(ctx context.Context, cartId string, productId string) (sql.Result, error) {
	query := `UPDATE cart_items SET deleted_at = ? WHERE cart_id = ? AND product_id = ? AND deleted_at IS NULL`
	return m.conn.ExecCtx(ctx, query, time.Now(), cartId, productId)
}

func (m *defaultCartItemsModel) FindByCartId(ctx context.Context, cartId string) ([]*CartItems, error) {
	query := `SELECT id, cart_id, product_id, quantity, created_at, updated_at, deleted_at FROM cart_items WHERE cart_id = ? AND deleted_at IS NULL`
	var items []*CartItems
	err := m.conn.QueryRowsCtx(ctx, &items, query, cartId)
	return items, err
}

func (m *defaultCartItemsModel) tableName() string {
	return m.table
}
