// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: order.proto

package orderrpc

import (
	"context"

	"shop/order/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateOrderRequest        = order.CreateOrderRequest
	CreateOrderResponse       = order.CreateOrderResponse
	GetOrderDetailRequest     = order.GetOrderDetailRequest
	GetOrderDetailResponse    = order.GetOrderDetailResponse
	ListOrdersRequest         = order.ListOrdersRequest
	ListOrdersResponse        = order.ListOrdersResponse
	Order                     = order.Order
	OrderItem                 = order.OrderItem
	SeckillOrderRequest       = order.SeckillOrderRequest
	SeckillOrderResponse      = order.SeckillOrderResponse
	UpdateOrderStatusRequest  = order.UpdateOrderStatusRequest
	UpdateOrderStatusResponse = order.UpdateOrderStatusResponse

	OrderRpc interface {
		CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
		GetOrderDetail(ctx context.Context, in *GetOrderDetailRequest, opts ...grpc.CallOption) (*GetOrderDetailResponse, error)
		ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
		UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error)
		SeckillOrder(ctx context.Context, in *SeckillOrderRequest, opts ...grpc.CallOption) (*SeckillOrderResponse, error)
	}

	defaultOrderRpc struct {
		cli zrpc.Client
	}
)

func NewOrderRpc(cli zrpc.Client) OrderRpc {
	return &defaultOrderRpc{
		cli: cli,
	}
}

func (m *defaultOrderRpc) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	client := order.NewOrderRpcClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultOrderRpc) GetOrderDetail(ctx context.Context, in *GetOrderDetailRequest, opts ...grpc.CallOption) (*GetOrderDetailResponse, error) {
	client := order.NewOrderRpcClient(m.cli.Conn())
	return client.GetOrderDetail(ctx, in, opts...)
}

func (m *defaultOrderRpc) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	client := order.NewOrderRpcClient(m.cli.Conn())
	return client.ListOrders(ctx, in, opts...)
}

func (m *defaultOrderRpc) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error) {
	client := order.NewOrderRpcClient(m.cli.Conn())
	return client.UpdateOrderStatus(ctx, in, opts...)
}

func (m *defaultOrderRpc) SeckillOrder(ctx context.Context, in *SeckillOrderRequest, opts ...grpc.CallOption) (*SeckillOrderResponse, error) {
	client := order.NewOrderRpcClient(m.cli.Conn())
	return client.SeckillOrder(ctx, in, opts...)
}
