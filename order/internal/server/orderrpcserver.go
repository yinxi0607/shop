// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: order.proto

package server

import (
	"context"

	"shop/order/internal/logic"
	"shop/order/internal/svc"
	"shop/order/order"
)

type OrderRpcServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderRpcServer
}

func NewOrderRpcServer(svcCtx *svc.ServiceContext) *OrderRpcServer {
	return &OrderRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *OrderRpcServer) CreateOrder(ctx context.Context, in *order.CreateOrderRequest) (*order.CreateOrderResponse, error) {
	l := logic.NewCreateOrderLogic(ctx, s.svcCtx)
	return l.CreateOrder(in)
}

func (s *OrderRpcServer) SeckillOrder(ctx context.Context, in *order.SeckillOrderRequest) (*order.SeckillOrderResponse, error) {
	l := logic.NewSeckillOrderLogic(ctx, s.svcCtx)
	return l.SeckillOrder(in)
}

func (s *OrderRpcServer) GetOrderDetail(ctx context.Context, in *order.GetOrderDetailRequest) (*order.GetOrderDetailResponse, error) {
	l := logic.NewGetOrderDetailLogic(ctx, s.svcCtx)
	return l.GetOrderDetail(in)
}

func (s *OrderRpcServer) ListOrders(ctx context.Context, in *order.ListOrdersRequest) (*order.ListOrdersResponse, error) {
	l := logic.NewListOrdersLogic(ctx, s.svcCtx)
	return l.ListOrders(in)
}

func (s *OrderRpcServer) UpdateOrderStatus(ctx context.Context, in *order.UpdateOrderStatusRequest) (*order.UpdateOrderStatusResponse, error) {
	l := logic.NewUpdateOrderStatusLogic(ctx, s.svcCtx)
	return l.UpdateOrderStatus(in)
}
