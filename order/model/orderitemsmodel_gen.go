// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderItemsFieldNames          = builder.RawFieldNames(&OrderItems{})
	orderItemsRows                = strings.Join(orderItemsFieldNames, ",")
	orderItemsRowsExpectAutoSet   = strings.Join(stringx.Remove(orderItemsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderItemsRowsWithPlaceHolder = strings.Join(stringx.Remove(orderItemsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	orderItemsModel interface {
		Insert(ctx context.Context, data *OrderItems) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OrderItems, error)
		Update(ctx context.Context, data *OrderItems) error
		Delete(ctx context.Context, id int64) error
		FindByOrderId(ctx context.Context, orderId string) ([]*OrderItems, error)
	}

	defaultOrderItemsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OrderItems struct {
		Id        int64        `db:"id"`
		OrderId   string       `db:"order_id"`
		ProductId string       `db:"product_id"`
		Quantity  int64        `db:"quantity"`
		CreatedAt time.Time    `db:"created_at"`
		UpdatedAt time.Time    `db:"updated_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
	}
)

func newOrderItemsModel(conn sqlx.SqlConn) *defaultOrderItemsModel {
	return &defaultOrderItemsModel{
		conn:  conn,
		table: "`order_items`",
	}
}

func (m *defaultOrderItemsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrderItemsModel) FindOne(ctx context.Context, id int64) (*OrderItems, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderItemsRows, m.table)
	var resp OrderItems
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderItemsModel) Insert(ctx context.Context, data *OrderItems) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, orderItemsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.ProductId, data.Quantity, data.DeletedAt)
	return ret, err
}

func (m *defaultOrderItemsModel) Update(ctx context.Context, data *OrderItems) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderItemsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.ProductId, data.Quantity, data.DeletedAt, data.Id)
	return err
}

func (m *defaultOrderItemsModel) tableName() string {
	return m.table
}

func (m *defaultOrderItemsModel) FindByOrderId(ctx context.Context, orderId string) ([]*OrderItems, error) {
	query := `SELECT * FROM order_items WHERE order_id = ?`
	var items []*OrderItems
	err := m.conn.QueryRowsCtx(ctx, &items, query, orderId)
	return items, err
}
