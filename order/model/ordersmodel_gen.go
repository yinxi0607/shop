// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ordersFieldNames          = builder.RawFieldNames(&Orders{})
	ordersRows                = strings.Join(ordersFieldNames, ",")
	ordersRowsExpectAutoSet   = strings.Join(stringx.Remove(ordersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ordersRowsWithPlaceHolder = strings.Join(stringx.Remove(ordersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	ordersModel interface {
		Insert(ctx context.Context, data *Orders) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Orders, error)
		FindOneByOrderId(ctx context.Context, orderId, userId string) (*Orders, error)
		Update(ctx context.Context, data *Orders) error
		Delete(ctx context.Context, id int64) error
		CountByUserId(ctx context.Context, userId string) (int64, error)
		Transact(func(session sqlx.Session) error) error
		FindByUserId(ctx context.Context, userId string, page, pageSize int32) ([]*Orders, error)
		UpdateStates(ctx context.Context, orderId, userId, status string) error
	}

	defaultOrdersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Orders struct {
		Id         int64        `db:"id"`
		OrderId    string       `db:"order_id"`
		UserId     string       `db:"user_id"`
		TotalPrice float64      `db:"total_price"`
		Status     string       `db:"status"`
		CreatedAt  time.Time    `db:"created_at"`
		UpdatedAt  time.Time    `db:"updated_at"`
		DeletedAt  sql.NullTime `db:"deleted_at"`
	}
)

func newOrdersModel(conn sqlx.SqlConn) *defaultOrdersModel {
	return &defaultOrdersModel{
		conn:  conn,
		table: "`orders`",
	}
}

func (m *defaultOrdersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultOrdersModel) FindOne(ctx context.Context, id int64) (*Orders, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ordersRows, m.table)
	var resp Orders
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) FindOneByOrderId(ctx context.Context, orderId, userId string) (*Orders, error) {
	var resp Orders
	query := fmt.Sprintf("select %s from %s where `order_id` = ? and user_id = ? limit 1", ordersRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderId, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) Insert(ctx context.Context, data *Orders) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, ordersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.UserId, data.TotalPrice, data.Status, data.DeletedAt)
	return ret, err
}

func (m *defaultOrdersModel) Update(ctx context.Context, newData *Orders) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ordersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.OrderId, newData.UserId, newData.TotalPrice, newData.Status, newData.DeletedAt, newData.Id)
	return err
}

func (m *defaultOrdersModel) UpdateStates(ctx context.Context, orderId, userId, status string) error {
	query := fmt.Sprintf("update %s set status=? where `order_id` = ? and `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, status, orderId, userId)
	return err
}

func (m *defaultOrdersModel) tableName() string {
	return m.table
}

func (m *defaultOrdersModel) CountByUserId(ctx context.Context, userId string) (int64, error) {
	query := `SELECT COUNT(*) FROM orders WHERE user_id = ?`
	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query, userId)
	return count, err
}

func (m *defaultOrdersModel) Transact(fn func(session sqlx.Session) error) error {
	return m.conn.Transact(fn)
}
func (m *defaultOrdersModel) FindByUserId(ctx context.Context, userId string, page, pageSize int32) ([]*Orders, error) {
	query := `SELECT * FROM orders WHERE user_id = ? LIMIT ? OFFSET ?`
	var orders []*Orders
	err := m.conn.QueryRowsCtx(ctx, &orders, query, userId, pageSize, (page-1)*pageSize)
	return orders, err
}
